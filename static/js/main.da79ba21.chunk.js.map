{"version":3,"sources":["API/coinGecko.js","context/CoinListContext.jsx","pages/CoinList.jsx","components/MarketDetails.jsx","components/ChartComponent.jsx","pages/Details.jsx","components/CustomAppBar.jsx","App.jsx","index.jsx"],"names":["axios","create","baseURL","CoinListContext","React","createContext","CoinListProvider","children","useState","currency","setCurrency","isLoading","setIsLoading","list","setList","page","setPage","perPage","setPerPage","useEffect","a","currencyFormatter","Intl","NumberFormat","style","maximumFractionDigits","percentFormatter","undefined","coinGecko","get","allCoin","pages","Math","ceil","data","active_cryptocurrencies","reqs","i","push","params","vs_currency","order","per_page","price_change_percentage","Promise","all","res","markets","reduce","prev","current","concat","map","item","id","rank","market_cap_rank","image","name","price","format","current_price","priceChange","price_change_percentage_24h","marketCap","market_cap","volume","total_volume","fetchData","Provider","value","search","prefix","filter","toLowerCase","startsWith","WatchList","useContext","history","useHistory","Container","Card","CardContent","TableContainer","Table","size","TableHead","TableRow","TableCell","sortDirection","TableBody","slice","listItem","hover","cursor","onClick","event","Avatar","src","display","color","green","red","ArrowDropUp","ArrowDropDown","TableFooter","TablePagination","rowsPerPageOptions","count","length","rowsPerPage","onChangePage","newPage","onChangeRowsPerPage","target","LinearProgress","MarketDetails","marketData","coinFormatter","isSmallScreen","useMediaQuery","theme","breakpoints","down","content","market_data","percent","market_cap_change_percentage_24h","ath","ath_change_percentage","atl","atl_change_percentage","circulating_supply","symbol","toUpperCase","fully_diluted_valuation","Fragment","row","index","Grid","container","direction","justify","spacing","md","xs","Typography","variant","Divider","useStyle","makeStyles","chartChangeBtnChecked","palette","info","light","daysSelected","background","daysBtn","paddingLeft","paddingRight","minWidth","ChartComponent","coin","dataSource","setDataSource","line","setLine","setDaysSelected","useTheme","classes","days","indexOf","mappedData","date","Date","o","h","l","c","changeDays","alignItems","small","IconButton","disableRipple","className","ShowChart","type","title","show","argumentField","openValueField","highValueField","lowValueField","closeValueField","valueField","position","precision","enabled","location","customizeTooltip","arg","html","originalArgument","toLocaleString","dateStyle","timeStyle","hourCycle","openValue","closeValue","highValue","lowValue","visible","argumentAxis","Button","bind","Details","match","setMarketData","coinId","localization","tickers","community_data","developer_data","sparkline","market","height","justifyItems","useStyles","borderRadius","shape","backgroundColor","fade","common","white","marginRight","width","up","marginLeft","searchIcon","padding","pointerEvents","justifyContent","inputRoot","inputInput","transition","transitions","CustomAppBar","themeType","setThemeType","searchResults","setSearchResults","openResult","setOpenResult","searchBoxValue","setSearchBoxValue","AppBar","marginBottom","Toolbar","flexGrow","Search","InputBase","placeholder","root","input","inputProps","onChange","results","Paper","elevation","List","ListItem","noWrap","window","localStorage","setItem","Brightness4","BrightnessHigh","App","getItem","createMuiTheme","ThemeProvider","CssBaseline","exact","path","component","CoinList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.da79ba21.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"https://api.coingecko.com/api/v3\",\r\n});\r\n","import React, { useEffect, useState } from \"react\";\r\nimport coinGecko from \"../API/coinGecko\";\r\n\r\nexport const CoinListContext = React.createContext(null);\r\n\r\nconst createData = (\r\n  id,\r\n  rank,\r\n  image,\r\n  name,\r\n  price,\r\n  priceChange,\r\n  marketCap,\r\n  volume\r\n) => {\r\n  return {\r\n    id,\r\n    rank,\r\n    image,\r\n    name,\r\n    price,\r\n    priceChange,\r\n    marketCap,\r\n    volume,\r\n  };\r\n};\r\n\r\nconst CoinListProvider = ({ children }) => {\r\n  const [currency, setCurrency] = useState(\"usd\");\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [list, setList] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [perPage, setPerPage] = useState(10);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n\r\n      const currencyFormatter = new Intl.NumberFormat(\"en-US\", {\r\n        style: \"currency\",\r\n        currency: currency,\r\n        maximumFractionDigits: 6,\r\n      });\r\n      const percentFormatter = new Intl.NumberFormat(undefined, {\r\n        maximumFractionDigits: 2,\r\n        style: \"percent\",\r\n      });\r\n\r\n      const allCoin = await coinGecko.get(\"/global\");\r\n      const pages = Math.ceil(allCoin.data.data.active_cryptocurrencies / 250);\r\n\r\n      const reqs = [];\r\n\r\n      for (let i = 1; i <= pages; i++) {\r\n        reqs.push(\r\n          coinGecko.get(\"/coins/markets\", {\r\n            params: {\r\n              vs_currency: currency,\r\n              order: \"market_cap_desc\",\r\n              per_page: 250,\r\n              page: i,\r\n              price_change_percentage: \"24h\",\r\n            },\r\n          })\r\n        );\r\n      }\r\n\r\n      const res = await Promise.all(reqs);\r\n\r\n      const markets = res.reduce(\r\n        (prev, current) => prev.concat(current.data),\r\n        []\r\n      );\r\n      setList(\r\n        markets.map((item) => {\r\n          return createData(\r\n            item.id,\r\n            item.market_cap_rank,\r\n            item.image,\r\n            item.name,\r\n            currencyFormatter.format(item.current_price),\r\n            percentFormatter.format(item.price_change_percentage_24h / 100),\r\n            currencyFormatter.format(item.market_cap),\r\n            currencyFormatter.format(item.total_volume)\r\n          );\r\n        })\r\n      );\r\n\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [currency]);\r\n\r\n  const search = (prefix) => {\r\n    return list.filter((value) => {\r\n      return (\r\n        value.name.toLowerCase().startsWith(prefix.toLowerCase()) ||\r\n        value.id.toLowerCase().startsWith(prefix.toLowerCase())\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <CoinListContext.Provider\r\n      value={{\r\n        currency,\r\n        isLoading,\r\n        list,\r\n        page,\r\n        perPage,\r\n        setCurrency,\r\n        setPage,\r\n        setPerPage,\r\n        search,\r\n      }}\r\n    >\r\n      {children}\r\n    </CoinListContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CoinListProvider;\r\n","import React, { useContext } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport {\r\n  Avatar,\r\n  Card,\r\n  CardContent,\r\n  Container,\r\n  LinearProgress,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableFooter,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n} from \"@material-ui/core\";\r\nimport { ArrowDropUp, ArrowDropDown } from \"@material-ui/icons\";\r\nimport { red, green } from \"@material-ui/core/colors\";\r\n\r\nimport { CoinListContext } from \"../context/CoinListContext\";\r\n\r\nconst WatchList = () => {\r\n  const { isLoading, list, page, perPage, setPage, setPerPage } = useContext(\r\n    CoinListContext\r\n  );\r\n\r\n  const history = useHistory();\r\n\r\n  const changePageHandler = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const changeRowPerPageHandler = (event) => {\r\n    setPerPage(event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  const redirect = (event, id) => {\r\n    history.push(`/coin-watch/${id}`);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Card>\r\n        <CardContent>\r\n          <TableContainer>\r\n            <Table size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell sortDirection=\"asc\">#</TableCell>\r\n                  <TableCell></TableCell>\r\n                  <TableCell>name</TableCell>\r\n                  <TableCell>price</TableCell>\r\n                  <TableCell>24h %</TableCell>\r\n                  <TableCell>market cap</TableCell>\r\n                  <TableCell>volume</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {list\r\n                  .slice(page * perPage, page * perPage + perPage)\r\n                  .map((listItem) => {\r\n                    return (\r\n                      <TableRow\r\n                        key={listItem.rank}\r\n                        hover\r\n                        style={{\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                        onClick={(event) => redirect(event, listItem.id)}\r\n                      >\r\n                        <TableCell>{listItem.rank}</TableCell>\r\n                        <TableCell>\r\n                          <Avatar src={listItem.image} />\r\n                        </TableCell>\r\n                        <TableCell>{listItem.name}</TableCell>\r\n                        <TableCell>{listItem.price}</TableCell>\r\n                        <TableCell>\r\n                          <span\r\n                            style={{\r\n                              display: \"flex\",\r\n                              color:\r\n                                listItem.priceChange.slice(0, -1) >= 0\r\n                                  ? green[400]\r\n                                  : red[400],\r\n                            }}\r\n                          >\r\n                            {listItem.priceChange.slice(0, -1) >= 0 ? (\r\n                              <ArrowDropUp />\r\n                            ) : (\r\n                              <ArrowDropDown />\r\n                            )}\r\n                            {listItem.priceChange}\r\n                          </span>\r\n                        </TableCell>\r\n                        <TableCell>{listItem.marketCap}</TableCell>\r\n                        <TableCell>{listItem.volume}</TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n              </TableBody>\r\n              <TableFooter>\r\n                <TableRow>\r\n                  <TablePagination\r\n                    rowsPerPageOptions={[10, 25, 50, 100, 250]}\r\n                    count={list.length}\r\n                    rowsPerPage={perPage}\r\n                    page={page}\r\n                    onChangePage={changePageHandler}\r\n                    onChangeRowsPerPage={changeRowPerPageHandler}\r\n                  />\r\n                </TableRow>\r\n              </TableFooter>\r\n            </Table>\r\n          </TableContainer>\r\n          {isLoading && <LinearProgress />}\r\n        </CardContent>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default WatchList;\r\n","import {\r\n  Divider,\r\n  Grid,\r\n  LinearProgress,\r\n  Typography,\r\n  useMediaQuery,\r\n} from \"@material-ui/core\";\r\nimport { ArrowDropUp, ArrowDropDown } from \"@material-ui/icons\";\r\nimport { red, green } from \"@material-ui/core/colors\";\r\nimport React from \"react\";\r\n\r\nconst MarketDetails = ({ marketData, currency, isLoading }) => {\r\n  const currencyFormatter = new Intl.NumberFormat(\"en-US\", {\r\n    style: \"currency\",\r\n    currency: currency,\r\n    maximumFractionDigits: 6,\r\n  });\r\n  const percentFormatter = new Intl.NumberFormat(undefined, {\r\n    maximumFractionDigits: 2,\r\n    style: \"percent\",\r\n  });\r\n  const coinFormatter = new Intl.NumberFormat();\r\n  const isSmallScreen = useMediaQuery((theme) => theme.breakpoints.down(\"xs\"));\r\n\r\n  const content = [\r\n    [\r\n      {\r\n        name: \"Market Cap\",\r\n        value:\r\n          (!isLoading &&\r\n            currencyFormatter.format(\r\n              marketData.market_data.market_cap[currency]\r\n            )) ||\r\n          \"--\",\r\n        percent:\r\n          (!isLoading &&\r\n            percentFormatter.format(\r\n              marketData.market_data.market_cap_change_percentage_24h / 100\r\n            )) ||\r\n          \"--\",\r\n      },\r\n      {\r\n        name: \"All Time High\",\r\n        value:\r\n          (!isLoading &&\r\n            currencyFormatter.format(marketData.market_data.ath[currency])) ||\r\n          \"--\",\r\n        percent:\r\n          (!isLoading &&\r\n            percentFormatter.format(\r\n              marketData.market_data.ath_change_percentage[currency] / 100\r\n            )) ||\r\n          \"--\",\r\n      },\r\n      {\r\n        name: \"All Time Low\",\r\n        value:\r\n          (!isLoading &&\r\n            currencyFormatter.format(marketData.market_data.atl[currency])) ||\r\n          \"--\",\r\n        percent:\r\n          (!isLoading &&\r\n            percentFormatter.format(\r\n              marketData.market_data.atl_change_percentage[currency] / 100\r\n            )) ||\r\n          \"--\",\r\n      },\r\n      {\r\n        name: \"Volume\",\r\n        value:\r\n          (!isLoading &&\r\n            currencyFormatter.format(\r\n              marketData.market_data.total_volume[currency]\r\n            )) ||\r\n          \"--\",\r\n      },\r\n      {\r\n        name: \"Circulating Supply\",\r\n        value: `${\r\n          !isLoading\r\n            ? coinFormatter.format(marketData.market_data.circulating_supply) +\r\n              \" \"\r\n            : \"-\"\r\n        }${!isLoading ? marketData.symbol.toUpperCase() : \"-\"}`,\r\n      },\r\n      {\r\n        name: \"Fully Diluted Valuation\",\r\n        value:\r\n          (!isLoading &&\r\n            marketData.market_data.fully_diluted_valuation[currency] &&\r\n            !isLoading &&\r\n            currencyFormatter.format(\r\n              marketData.market_data.fully_diluted_valuation[currency]\r\n            )) ||\r\n          \"--\",\r\n      },\r\n    ],\r\n  ];\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <LinearProgress />}\r\n      {content.map((row, index) => {\r\n        return (\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"space-between\"\r\n            key={index}\r\n            spacing={3}\r\n          >\r\n            {row.map((item, index) => {\r\n              return (\r\n                <Grid md={4} xs={12} item key={index}>\r\n                  <Typography variant=\"subtitle2\" display=\"block\">\r\n                    {item.name}\r\n                  </Typography>\r\n                  <Typography variant=\"h6\" display=\"block\">\r\n                    {item.value}\r\n                  </Typography>\r\n                  {item.percent && (\r\n                    <Typography\r\n                      variant=\"caption\"\r\n                      style={{\r\n                        display: \"flex\",\r\n                        color:\r\n                          !isLoading &&\r\n                          (item.percent >= 0 ? green[400] : red[400]),\r\n                      }}\r\n                    >\r\n                      {!isLoading &&\r\n                        (item.percent >= 0 ? (\r\n                          <ArrowDropUp />\r\n                        ) : (\r\n                          <ArrowDropDown />\r\n                        ))}\r\n                      {item.percent}\r\n                    </Typography>\r\n                  )}\r\n                  {isSmallScreen && index < row.length - 1 && (\r\n                    <Divider variant=\"fullWidth\" />\r\n                  )}\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n        );\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MarketDetails;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Chart, {\r\n  CommonSeriesSettings,\r\n  Series,\r\n  Reduction,\r\n  ArgumentAxis,\r\n  Label,\r\n  Format,\r\n  ValueAxis,\r\n  Tooltip,\r\n  ZoomAndPan,\r\n  Legend,\r\n  LoadingIndicator,\r\n} from \"devextreme-react/chart\";\r\nimport \"devextreme/dist/css/dx.common.css\";\r\nimport \"devextreme/dist/css/dx.light.compact.css\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  Grid,\r\n  IconButton,\r\n  LinearProgress,\r\n  makeStyles,\r\n  Typography,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport { ShowChart, ArrowDropDown, ArrowDropUp } from \"@material-ui/icons\";\r\nimport { red, green } from \"@material-ui/core/colors\";\r\n\r\nimport coinGecko from \"../API/coinGecko\";\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n  chartChangeBtnChecked: {\r\n    color: theme.palette.info.light,\r\n  },\r\n  daysSelected: {\r\n    background: theme.palette.info.light,\r\n    \"&:hover\": {\r\n      background: theme.palette.info.light,\r\n    },\r\n  },\r\n  daysBtn: {\r\n    paddingLeft: \"0.1rem\",\r\n    paddingRight: \"0.1rem\",\r\n    minWidth: \"40px\",\r\n  },\r\n}));\r\n\r\nconst ChartComponent = ({ coin, currency, marketData }) => {\r\n  const [dataSource, setDataSource] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [line, setLine] = useState(false);\r\n  const [daysSelected, setDaysSelected] = useState([\r\n    true,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n  ]);\r\n\r\n  const theme = useTheme();\r\n  const classes = useStyle();\r\n  const formats = [\r\n    \"HH:mm\",\r\n    \"HH:mm\\nMMM dd\",\r\n    \"HH:mm\\nMMM dd\",\r\n    \"MMM dd, yyyy\",\r\n    \"MMM dd, yyyy\",\r\n    \"MMM dd, yyyy\",\r\n  ];\r\n  const currencyFormatter = new Intl.NumberFormat(\"en-US\", {\r\n    style: \"currency\",\r\n    currency: currency,\r\n    maximumFractionDigits: 6,\r\n  });\r\n  const percentFormatter = new Intl.NumberFormat(undefined, {\r\n    maximumFractionDigits: 2,\r\n    style: \"percent\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    const days = [1, 7, 30, 180, 365, \"max\"];\r\n\r\n    const fetchData = async () => {\r\n      const data = await coinGecko.get(`/coins/${coin}/ohlc`, {\r\n        params: {\r\n          vs_currency: currency,\r\n          days: days[daysSelected.indexOf(true)],\r\n        },\r\n      });\r\n\r\n      const mappedData = data.data.map((value) => {\r\n        return {\r\n          date: new Date(value[0]),\r\n          o: value[1],\r\n          h: value[2],\r\n          l: value[3],\r\n          c: value[4],\r\n        };\r\n      });\r\n      setDataSource(mappedData);\r\n      setIsLoading(false);\r\n    };\r\n    fetchData();\r\n  }, [coin, currency, daysSelected]);\r\n\r\n  const customizeTooltip = (arg) => {\r\n    const text =\r\n      `<div><b>${arg.originalArgument.toLocaleString(undefined, {\r\n        dateStyle: \"medium\",\r\n        timeStyle: \"short\",\r\n        hourCycle: \"h23\",\r\n      })}</b><br/><br/>` +\r\n      (arg.openValue\r\n        ? `<b>Open:</b> ${currencyFormatter.format(arg.openValue)}<br/>\r\n<b>Close:</b> ${currencyFormatter.format(arg.closeValue)}<br/>\r\n<b>High:</b> ${currencyFormatter.format(arg.highValue)}<br/>\r\n<b>Low:</b> ${currencyFormatter.format(arg.lowValue)}</div>`\r\n        : `<b>Price:</b> ${currencyFormatter.format(arg.value)}</div>`);\r\n    return {\r\n      html: text,\r\n    };\r\n  };\r\n\r\n  const btnToggle = () => {\r\n    setLine(!line);\r\n  };\r\n\r\n  const changeDays = (index) => {\r\n    const res = daysSelected.map((value, i) => {\r\n      return i === index;\r\n    });\r\n    setDaysSelected(res);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <LinearProgress />}\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        <Grid item>\r\n          <Grid container direction=\"row\" spacing={2} alignItems=\"center\">\r\n            <Grid item>\r\n              <Avatar src={marketData && marketData.image.small} />\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography>\r\n                {marketData &&\r\n                  currencyFormatter.format(\r\n                    marketData.market_data.current_price[currency]\r\n                  )}\r\n              </Typography>\r\n              <Typography\r\n                style={{\r\n                  display: \"flex\",\r\n                  color:\r\n                    marketData &&\r\n                    (marketData.market_data.price_change_percentage_24h >= 0\r\n                      ? green[400]\r\n                      : red[400]),\r\n                }}\r\n              >\r\n                {marketData &&\r\n                  (marketData.market_data.price_change_percentage_24h >= 0 ? (\r\n                    <ArrowDropUp />\r\n                  ) : (\r\n                    <ArrowDropDown />\r\n                  ))}\r\n                {marketData &&\r\n                  percentFormatter.format(\r\n                    marketData.market_data.price_change_percentage_24h / 100\r\n                  )}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n          <IconButton\r\n            size=\"small\"\r\n            disableRipple\r\n            className={line ? classes.chartChangeBtnChecked : \"\"}\r\n            onClick={btnToggle}\r\n          >\r\n            <ShowChart />\r\n          </IconButton>\r\n        </Grid>\r\n      </Grid>\r\n      <Chart\r\n        id=\"chart\"\r\n        theme={`generic.${theme.palette.type}`}\r\n        title={marketData && marketData.name + \" Price\"}\r\n        dataSource={dataSource}\r\n      >\r\n        <LoadingIndicator show={isLoading} />\r\n        <CommonSeriesSettings\r\n          argumentField=\"date\"\r\n          type={line ? \"\" : \"candlestick\"}\r\n        />\r\n        <Series\r\n          name={marketData && marketData.name}\r\n          openValueField=\"o\"\r\n          highValueField=\"h\"\r\n          lowValueField=\"l\"\r\n          closeValueField=\"c\"\r\n          valueField=\"c\"\r\n        >\r\n          <Reduction color=\"red\" />\r\n        </Series>\r\n        <ArgumentAxis>\r\n          <Label format={formats[daysSelected.indexOf(true)]} />\r\n        </ArgumentAxis>\r\n        <ValueAxis position=\"left\">\r\n          <Label>\r\n            <Format\r\n              precision={\r\n                marketData &&\r\n                (marketData.market_data.current_price[currency] > 100 ? 0 : 2)\r\n              }\r\n              type=\"currency\"\r\n              currency={currency}\r\n            />\r\n          </Label>\r\n        </ValueAxis>\r\n        <Tooltip\r\n          enabled={true}\r\n          location=\"edge\"\r\n          customizeTooltip={customizeTooltip}\r\n        />\r\n        <Legend visible={false} />\r\n        <ZoomAndPan argumentAxis=\"both\" />\r\n      </Chart>\r\n      <br />\r\n      <Grid container spacing={1}>\r\n        {[\"1D\", \"7D\", \"1M\", \"6M\", \"1Y\", \"All\"].map((value, index) => {\r\n          return (\r\n            <Grid item key={index}>\r\n              <Button\r\n                className={`${classes.daysBtn}${\r\n                  daysSelected[index] ? \" \" + classes.daysSelected : \"\"\r\n                }`}\r\n                variant=\"outlined\"\r\n                key={index}\r\n                onClick={changeDays.bind(this, index)}\r\n              >\r\n                {value}\r\n              </Button>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ChartComponent;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Grid, Card, CardContent, Container } from \"@material-ui/core\";\r\n\r\nimport coinGecko from \"../API/coinGecko\";\r\nimport MarketDetails from \"../components/MarketDetails\";\r\nimport ChartComponent from \"../components/ChartComponent\";\r\n\r\nconst Details = ({ match }) => {\r\n  const [marketData, setMarketData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const coinId = match.params.coinId;\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n      const market = await coinGecko.get(`/coins/${coinId}`, {\r\n        params: {\r\n          localization: false,\r\n          tickers: false,\r\n          market_data: true,\r\n          community_data: false,\r\n          developer_data: false,\r\n          sparkline: false,\r\n        },\r\n      });\r\n\r\n      setMarketData(market.data);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [coinId]);\r\n\r\n  return (\r\n    <Container>\r\n      <Grid container spacing={2} justify=\"center\" direction=\"row\">\r\n        <Grid item xs={12}>\r\n          <Card style={{ height: \"100%\", justifyItems: \"center\" }}>\r\n            <CardContent>\r\n              <ChartComponent\r\n                coin={coinId}\r\n                currency=\"usd\"\r\n                marketData={marketData}\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Card>\r\n            <CardContent>\r\n              <MarketDetails\r\n                marketData={marketData}\r\n                currency=\"usd\"\r\n                isLoading={isLoading}\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Details;\r\n","import {\r\n  AppBar,\r\n  Avatar,\r\n  Container,\r\n  fade,\r\n  IconButton,\r\n  InputBase,\r\n  List,\r\n  ListItem,\r\n  makeStyles,\r\n  Paper,\r\n  Toolbar,\r\n  Typography,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport { Brightness4, BrightnessHigh, Search } from \"@material-ui/icons\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { CoinListContext } from \"../context/CoinListContext\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  search: {\r\n    position: \"relative\",\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    \"&:hover\": {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      marginLeft: theme.spacing(1),\r\n      width: \"auto\",\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: \"100%\",\r\n    position: \"absolute\",\r\n    pointerEvents: \"none\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  inputRoot: {\r\n    color: \"inherit\",\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create(\"width\"),\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: \"12ch\",\r\n      \"&:focus\": {\r\n        width: \"20ch\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst CustomAppBar = ({ themeType, setThemeType }) => {\r\n  const classes = useStyles();\r\n  const { search } = useContext(CoinListContext);\r\n\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [openResult, setOpenResult] = useState(false);\r\n  const [searchBoxValue, setSearchBoxValue] = useState(\"\");\r\n\r\n  const history = useHistory();\r\n  const theme = useTheme();\r\n\r\n  const changeTheme = (event) => {\r\n    const type = themeType === \"dark\" ? \"light\" : \"dark\";\r\n    window.localStorage.setItem(\"theme\", type);\r\n    setThemeType(type);\r\n  };\r\n\r\n  const searchHandler = (event) => {\r\n    const prefix = event.target.value;\r\n    setSearchBoxValue(prefix);\r\n\r\n    const results = search(prefix);\r\n\r\n    if (prefix.length < 2 || results.length === 0) {\r\n      setOpenResult(false);\r\n      setSearchResults([]);\r\n      return;\r\n    }\r\n\r\n    setSearchResults(results.slice(0, 10));\r\n    setOpenResult(true);\r\n  };\r\n\r\n  return (\r\n    <AppBar\r\n      color=\"default\"\r\n      position=\"sticky\"\r\n      style={{ marginBottom: theme.spacing(1) }}\r\n    >\r\n      <Container>\r\n        <Toolbar>\r\n          <Typography\r\n            style={{ flexGrow: 1, cursor: \"pointer\" }}\r\n            onClick={() => history.push(\"/coin-watch\")}\r\n          >\r\n            Coin Watch\r\n          </Typography>\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <Search />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Search…\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ \"aria-label\": \"search\" }}\r\n              onChange={searchHandler}\r\n              value={searchBoxValue}\r\n            />\r\n            <pre\r\n              style={{\r\n                position: \"absolute\",\r\n                width: \"100%\",\r\n                display: openResult ? \"block\" : \"none\",\r\n              }}\r\n            >\r\n              <Paper elevation={3}>\r\n                <List>\r\n                  {searchResults.map((value, index) => {\r\n                    return (\r\n                      <ListItem\r\n                        key={index}\r\n                        style={{\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                        onClick={() => {\r\n                          history.push(`/coin-watch/${value.id}`);\r\n                          setOpenResult(false);\r\n                          setSearchBoxValue(\"\");\r\n                        }}\r\n                      >\r\n                        <Avatar\r\n                          src={value.image}\r\n                          style={{\r\n                            marginRight: theme.spacing(1),\r\n                          }}\r\n                        />\r\n                        <Typography variant=\"caption\" noWrap>\r\n                          {value.name}\r\n                        </Typography>\r\n                      </ListItem>\r\n                    );\r\n                  })}\r\n                </List>\r\n              </Paper>\r\n            </pre>\r\n          </div>\r\n          <IconButton onClick={changeTheme}>\r\n            {themeType !== \"dark\" ? <Brightness4 /> : <BrightnessHigh />}\r\n          </IconButton>\r\n        </Toolbar>\r\n      </Container>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default CustomAppBar;\r\n","import React, { useState } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { createMuiTheme, ThemeProvider, CssBaseline } from \"@material-ui/core\";\n\nimport CoinList from \"./pages/CoinList\";\nimport Details from \"./pages/Details\";\nimport CustomAppBar from \"./components/CustomAppBar\";\n\nfunction App() {\n  const [themeType, setThemeType] = useState(\n    window.localStorage.getItem(\"theme\") || \"dark\"\n  );\n\n  const theme = createMuiTheme({\n    palette: {\n      type: themeType,\n    },\n  });\n\n  return (\n    <React.Fragment>\n      <ThemeProvider theme={theme}>\n        <BrowserRouter>\n          <CustomAppBar themeType={themeType} setThemeType={setThemeType} />\n          <CssBaseline />\n          <Switch>\n            <Route exact path=\"/coin-watch\" component={CoinList} />\n            <Route path=\"/coin-watch/:coinId\" component={Details} />\n          </Switch>\n        </BrowserRouter>\n      </ThemeProvider>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport CoinListProvider from \"./context/CoinListContext\";\n\nReactDOM.render(\n  <CoinListProvider>\n    <App />\n  </CoinListProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}