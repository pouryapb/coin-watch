{"version":3,"sources":["API/coinGecko.js","pages/CoinList.jsx","components/MarketDetails.jsx","components/ChartComponent.jsx","pages/Details.jsx","App.jsx","index.jsx"],"names":["axios","create","baseURL","WatchList","currency","useState","list","setList","page","setPage","perPage","setPerPage","isLoading","setIsLoading","history","useHistory","useEffect","a","coinGecko","get","params","vs_currency","order","per_page","price_change_percentage","markets","currencyFormatter","Intl","NumberFormat","style","maximumFractionDigits","percentFormatter","undefined","data","map","item","id","rank","market_cap_rank","image","name","price","format","current_price","priceChange","price_change_percentage_24h","marketCap","market_cap","volume","total_volume","fetchData","Container","Card","CardContent","LinearProgress","TableContainer","Table","size","TableHead","TableRow","TableCell","TableBody","listItem","hover","cursor","onClick","event","push","Avatar","src","display","color","slice","green","red","ArrowDropUp","ArrowDropDown","TablePagination","component","rowsPerPageOptions","count","rowsPerPage","onChangePage","newPage","onChangeRowsPerPage","target","value","MarketDetails","marketData","coinFormatter","isSmallScreen","useMediaQuery","theme","breakpoints","down","content","market_data","percent","market_cap_change_percentage_24h","ath","ath_change_percentage","atl","atl_change_percentage","circulating_supply","symbol","toUpperCase","fully_diluted_valuation","Fragment","row","index","Grid","container","direction","justify","spacing","md","xs","Typography","variant","length","Divider","useStyle","makeStyles","chartChangeBtnChecked","palette","info","light","daysSelected","background","daysBtn","paddingLeft","paddingRight","minWidth","ChartComponent","coin","dataSource","setDataSource","line","setLine","setDaysSelected","useTheme","classes","days","indexOf","mappedData","date","Date","o","h","l","c","changeDays","res","i","alignItems","small","IconButton","disableRipple","className","ShowChart","type","title","show","argumentField","openValueField","highValueField","lowValueField","closeValueField","valueField","position","precision","enabled","location","customizeTooltip","arg","html","originalArgument","toLocaleString","dateStyle","timeStyle","hourCycle","openValue","closeValue","highValue","lowValue","visible","argumentAxis","Button","bind","Details","match","setMarketData","coinId","localization","tickers","community_data","developer_data","sparkline","market","height","justifyItems","App","window","localStorage","getItem","themeColor","setThemeType","createMuiTheme","ThemeProvider","AppBar","marginBottom","Toolbar","flexGrow","setItem","Brightness4","BrightnessHigh","CssBaseline","exact","path","render","props","CoinList","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ee22a3e9.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"https://api.coingecko.com/api/v3\",\r\n});\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Avatar,\r\n  Card,\r\n  CardContent,\r\n  Container,\r\n  LinearProgress,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n} from \"@material-ui/core\";\r\nimport { ArrowDropUp, ArrowDropDown } from \"@material-ui/icons\";\r\nimport { red, green } from \"@material-ui/core/colors\";\r\n\r\nimport coinGecko from \"../API/coinGecko\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst createData = (\r\n  id,\r\n  rank,\r\n  image,\r\n  name,\r\n  price,\r\n  priceChange,\r\n  marketCap,\r\n  volume\r\n) => {\r\n  return {\r\n    id,\r\n    rank,\r\n    image,\r\n    name,\r\n    price,\r\n    priceChange,\r\n    marketCap,\r\n    volume,\r\n  };\r\n};\r\n\r\nconst WatchList = ({ currency }) => {\r\n  const [list, setList] = useState(null);\r\n  const [page, setPage] = useState(1);\r\n  const [perPage, setPerPage] = useState(10);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n      const markets = await coinGecko.get(\"/coins/markets\", {\r\n        params: {\r\n          vs_currency: currency,\r\n          order: \"market_cap_desc\",\r\n          per_page: perPage,\r\n          page: page,\r\n          price_change_percentage: \"24h\",\r\n        },\r\n      });\r\n\r\n      const currencyFormatter = new Intl.NumberFormat(\"en-US\", {\r\n        style: \"currency\",\r\n        currency: currency,\r\n        maximumFractionDigits: 6,\r\n      });\r\n      const percentFormatter = new Intl.NumberFormat(undefined, {\r\n        maximumFractionDigits: 2,\r\n        style: \"percent\",\r\n      });\r\n\r\n      setList(\r\n        markets.data.map((item) => {\r\n          return createData(\r\n            item.id,\r\n            item.market_cap_rank,\r\n            item.image,\r\n            item.name,\r\n            currencyFormatter.format(item.current_price),\r\n            percentFormatter.format(item.price_change_percentage_24h / 100),\r\n            currencyFormatter.format(item.market_cap),\r\n            currencyFormatter.format(item.total_volume)\r\n          );\r\n        })\r\n      );\r\n\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [currency, page, perPage]);\r\n\r\n  const changePageHandler = (event, newPage) => {\r\n    setPage(newPage + 1);\r\n  };\r\n\r\n  const changeRowPerPageHandler = (event) => {\r\n    setPerPage(event.target.value);\r\n    setPage(1);\r\n  };\r\n\r\n  const redirect = (event, id) => {\r\n    history.push(id);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Card>\r\n        <CardContent>\r\n          {isLoading && <LinearProgress />}\r\n          <TableContainer>\r\n            <Table size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>#</TableCell>\r\n                  <TableCell></TableCell>\r\n                  <TableCell>name</TableCell>\r\n                  <TableCell>price</TableCell>\r\n                  <TableCell>24h %</TableCell>\r\n                  <TableCell>market cap</TableCell>\r\n                  <TableCell>volume</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {list &&\r\n                  list.map((listItem) => {\r\n                    return (\r\n                      <TableRow\r\n                        key={listItem.rank}\r\n                        hover\r\n                        style={{\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                        onClick={(event) => redirect(event, listItem.id)}\r\n                      >\r\n                        <TableCell>{listItem.rank}</TableCell>\r\n                        <TableCell>\r\n                          <Avatar src={listItem.image} />\r\n                        </TableCell>\r\n                        <TableCell>{listItem.name}</TableCell>\r\n                        <TableCell>{listItem.price}</TableCell>\r\n                        <TableCell>\r\n                          <span\r\n                            style={{\r\n                              display: \"flex\",\r\n                              color:\r\n                                listItem.priceChange.slice(0, -1) >= 0\r\n                                  ? green[400]\r\n                                  : red[400],\r\n                            }}\r\n                          >\r\n                            {listItem.priceChange.slice(0, -1) >= 0 ? (\r\n                              <ArrowDropUp />\r\n                            ) : (\r\n                              <ArrowDropDown />\r\n                            )}\r\n                            {listItem.priceChange}\r\n                          </span>\r\n                        </TableCell>\r\n                        <TableCell>{listItem.marketCap}</TableCell>\r\n                        <TableCell>{listItem.volume}</TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <TablePagination\r\n            component=\"div\"\r\n            rowsPerPageOptions={[10, 25, 50, 100]}\r\n            count={200}\r\n            rowsPerPage={perPage}\r\n            page={page - 1}\r\n            onChangePage={changePageHandler}\r\n            onChangeRowsPerPage={changeRowPerPageHandler}\r\n          />\r\n        </CardContent>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default WatchList;\r\n","import {\r\n  Divider,\r\n  Grid,\r\n  LinearProgress,\r\n  Typography,\r\n  useMediaQuery,\r\n} from \"@material-ui/core\";\r\nimport { ArrowDropUp, ArrowDropDown } from \"@material-ui/icons\";\r\nimport { red, green } from \"@material-ui/core/colors\";\r\nimport React from \"react\";\r\n\r\nconst MarketDetails = ({ marketData, currency, isLoading }) => {\r\n  const currencyFormatter = new Intl.NumberFormat(\"en-US\", {\r\n    style: \"currency\",\r\n    currency: currency,\r\n    maximumFractionDigits: 6,\r\n  });\r\n  const percentFormatter = new Intl.NumberFormat(undefined, {\r\n    maximumFractionDigits: 2,\r\n    style: \"percent\",\r\n  });\r\n  const coinFormatter = new Intl.NumberFormat();\r\n  const isSmallScreen = useMediaQuery((theme) => theme.breakpoints.down(\"xs\"));\r\n\r\n  const content = [\r\n    [\r\n      {\r\n        name: \"Market Cap\",\r\n        value:\r\n          (!isLoading &&\r\n            currencyFormatter.format(\r\n              marketData.market_data.market_cap[currency]\r\n            )) ||\r\n          \"--\",\r\n        percent:\r\n          (!isLoading &&\r\n            percentFormatter.format(\r\n              marketData.market_data.market_cap_change_percentage_24h / 100\r\n            )) ||\r\n          \"--\",\r\n      },\r\n      {\r\n        name: \"All Time High\",\r\n        value:\r\n          (!isLoading &&\r\n            currencyFormatter.format(marketData.market_data.ath[currency])) ||\r\n          \"--\",\r\n        percent:\r\n          (!isLoading &&\r\n            percentFormatter.format(\r\n              marketData.market_data.ath_change_percentage[currency] / 100\r\n            )) ||\r\n          \"--\",\r\n      },\r\n      {\r\n        name: \"All Time Low\",\r\n        value:\r\n          (!isLoading &&\r\n            currencyFormatter.format(marketData.market_data.atl[currency])) ||\r\n          \"--\",\r\n        percent:\r\n          (!isLoading &&\r\n            percentFormatter.format(\r\n              marketData.market_data.atl_change_percentage[currency] / 100\r\n            )) ||\r\n          \"--\",\r\n      },\r\n      {\r\n        name: \"Volume\",\r\n        value:\r\n          (!isLoading &&\r\n            currencyFormatter.format(\r\n              marketData.market_data.total_volume[currency]\r\n            )) ||\r\n          \"--\",\r\n      },\r\n      {\r\n        name: \"Circulating Supply\",\r\n        value: `${\r\n          !isLoading\r\n            ? coinFormatter.format(marketData.market_data.circulating_supply) +\r\n              \" \"\r\n            : \"-\"\r\n        }${!isLoading ? marketData.symbol.toUpperCase() : \"-\"}`,\r\n      },\r\n      {\r\n        name: \"Fully Diluted Valuation\",\r\n        value:\r\n          (!isLoading &&\r\n            marketData.market_data.fully_diluted_valuation[currency] &&\r\n            !isLoading &&\r\n            currencyFormatter.format(\r\n              marketData.market_data.fully_diluted_valuation[currency]\r\n            )) ||\r\n          \"--\",\r\n      },\r\n    ],\r\n  ];\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <LinearProgress />}\r\n      {content.map((row, index) => {\r\n        return (\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"space-between\"\r\n            key={index}\r\n            spacing={3}\r\n          >\r\n            {row.map((item, index) => {\r\n              return (\r\n                <Grid md={4} xs={12} item key={index}>\r\n                  <Typography variant=\"subtitle2\" display=\"block\">\r\n                    {item.name}\r\n                  </Typography>\r\n                  <Typography variant=\"h6\" display=\"block\">\r\n                    {item.value}\r\n                  </Typography>\r\n                  {item.percent && (\r\n                    <Typography\r\n                      variant=\"caption\"\r\n                      style={{\r\n                        display: \"flex\",\r\n                        color:\r\n                          !isLoading &&\r\n                          (item.percent >= 0 ? green[400] : red[400]),\r\n                      }}\r\n                    >\r\n                      {!isLoading &&\r\n                        (item.percent >= 0 ? (\r\n                          <ArrowDropUp />\r\n                        ) : (\r\n                          <ArrowDropDown />\r\n                        ))}\r\n                      {item.percent}\r\n                    </Typography>\r\n                  )}\r\n                  {isSmallScreen && index < row.length - 1 && (\r\n                    <Divider variant=\"fullWidth\" />\r\n                  )}\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n        );\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MarketDetails;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Chart, {\r\n  CommonSeriesSettings,\r\n  Series,\r\n  Reduction,\r\n  ArgumentAxis,\r\n  Label,\r\n  Format,\r\n  ValueAxis,\r\n  Tooltip,\r\n  ZoomAndPan,\r\n  Legend,\r\n  LoadingIndicator,\r\n} from \"devextreme-react/chart\";\r\nimport \"devextreme/dist/css/dx.common.css\";\r\nimport \"devextreme/dist/css/dx.light.css\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  Grid,\r\n  IconButton,\r\n  LinearProgress,\r\n  makeStyles,\r\n  Typography,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport { ShowChart, ArrowDropDown, ArrowDropUp } from \"@material-ui/icons\";\r\nimport { red, green } from \"@material-ui/core/colors\";\r\n\r\nimport coinGecko from \"../API/coinGecko\";\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n  chartChangeBtnChecked: {\r\n    color: theme.palette.info.light,\r\n  },\r\n  daysSelected: {\r\n    background: theme.palette.info.light,\r\n    \"&:hover\": {\r\n      background: theme.palette.info.light,\r\n    },\r\n  },\r\n  daysBtn: {\r\n    paddingLeft: \"0.1rem\",\r\n    paddingRight: \"0.1rem\",\r\n    minWidth: \"40px\",\r\n  },\r\n}));\r\n\r\nconst ChartComponent = ({ coin, currency, marketData }) => {\r\n  const [dataSource, setDataSource] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [line, setLine] = useState(false);\r\n  const [daysSelected, setDaysSelected] = useState([\r\n    true,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n  ]);\r\n\r\n  const theme = useTheme();\r\n  const classes = useStyle();\r\n  const formats = [\r\n    \"HH:mm\",\r\n    \"HH:mm\\nMMM dd\",\r\n    \"HH:mm\\nMMM dd\",\r\n    \"MMM dd, yyyy\",\r\n    \"MMM dd, yyyy\",\r\n    \"MMM dd, yyyy\",\r\n  ];\r\n  const currencyFormatter = new Intl.NumberFormat(\"en-US\", {\r\n    style: \"currency\",\r\n    currency: currency,\r\n    maximumFractionDigits: 6,\r\n  });\r\n  const percentFormatter = new Intl.NumberFormat(undefined, {\r\n    maximumFractionDigits: 2,\r\n    style: \"percent\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    const days = [1, 7, 30, 180, 365, \"max\"];\r\n\r\n    const fetchData = async () => {\r\n      const data = await coinGecko.get(`/coins/${coin}/ohlc`, {\r\n        params: {\r\n          vs_currency: currency,\r\n          days: days[daysSelected.indexOf(true)],\r\n        },\r\n      });\r\n\r\n      const mappedData = data.data.map((value) => {\r\n        return {\r\n          date: new Date(value[0]),\r\n          o: value[1],\r\n          h: value[2],\r\n          l: value[3],\r\n          c: value[4],\r\n        };\r\n      });\r\n      setDataSource(mappedData);\r\n      setIsLoading(false);\r\n    };\r\n    fetchData();\r\n  }, [coin, currency, daysSelected]);\r\n\r\n  const customizeTooltip = (arg) => {\r\n    const text =\r\n      `<div><b>${arg.originalArgument.toLocaleString(undefined, {\r\n        dateStyle: \"medium\",\r\n        timeStyle: \"short\",\r\n        hourCycle: \"h23\",\r\n      })}</b><br/><br/>` +\r\n      (arg.openValue\r\n        ? `<b>Open:</b> ${currencyFormatter.format(arg.openValue)}<br/>\r\n<b>Close:</b> ${currencyFormatter.format(arg.closeValue)}<br/>\r\n<b>High:</b> ${currencyFormatter.format(arg.highValue)}<br/>\r\n<b>Low:</b> ${currencyFormatter.format(arg.lowValue)}</div>`\r\n        : `<b>Price:</b> ${currencyFormatter.format(arg.value)}</div>`);\r\n    return {\r\n      html: text,\r\n    };\r\n  };\r\n\r\n  const btnToggle = () => {\r\n    setLine(!line);\r\n  };\r\n\r\n  const changeDays = (index) => {\r\n    const res = daysSelected.map((value, i) => {\r\n      return i === index;\r\n    });\r\n    setDaysSelected(res);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <LinearProgress />}\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        <Grid item>\r\n          <Grid container direction=\"row\" spacing={2} alignItems=\"center\">\r\n            <Grid item>\r\n              <Avatar src={marketData && marketData.image.small} />\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography>\r\n                {marketData &&\r\n                  currencyFormatter.format(\r\n                    marketData.market_data.current_price[currency]\r\n                  )}\r\n              </Typography>\r\n              <Typography\r\n                style={{\r\n                  display: \"flex\",\r\n                  color:\r\n                    marketData &&\r\n                    (marketData.market_data.price_change_percentage_24h >= 0\r\n                      ? green[400]\r\n                      : red[400]),\r\n                }}\r\n              >\r\n                {marketData &&\r\n                  (marketData.market_data.price_change_percentage_24h >= 0 ? (\r\n                    <ArrowDropUp />\r\n                  ) : (\r\n                    <ArrowDropDown />\r\n                  ))}\r\n                {marketData &&\r\n                  percentFormatter.format(\r\n                    marketData.market_data.price_change_percentage_24h / 100\r\n                  )}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n          <IconButton\r\n            size=\"small\"\r\n            disableRipple\r\n            className={line ? classes.chartChangeBtnChecked : \"\"}\r\n            onClick={btnToggle}\r\n          >\r\n            <ShowChart />\r\n          </IconButton>\r\n        </Grid>\r\n      </Grid>\r\n      <Chart\r\n        id=\"chart\"\r\n        theme={`generic.${theme.palette.type}`}\r\n        title={marketData && marketData.name + \" Price\"}\r\n        dataSource={dataSource}\r\n      >\r\n        <LoadingIndicator show={isLoading} />\r\n        <CommonSeriesSettings\r\n          argumentField=\"date\"\r\n          type={line ? \"\" : \"candlestick\"}\r\n        />\r\n        <Series\r\n          name={marketData && marketData.name}\r\n          openValueField=\"o\"\r\n          highValueField=\"h\"\r\n          lowValueField=\"l\"\r\n          closeValueField=\"c\"\r\n          valueField=\"c\"\r\n        >\r\n          <Reduction color=\"red\" />\r\n        </Series>\r\n        <ArgumentAxis>\r\n          <Label format={formats[daysSelected.indexOf(true)]} />\r\n        </ArgumentAxis>\r\n        <ValueAxis position=\"left\">\r\n          <Label>\r\n            <Format\r\n              precision={\r\n                marketData &&\r\n                (marketData.market_data.current_price[currency] > 100 ? 0 : 2)\r\n              }\r\n              type=\"currency\"\r\n              currency={currency}\r\n            />\r\n          </Label>\r\n        </ValueAxis>\r\n        <Tooltip\r\n          enabled={true}\r\n          location=\"edge\"\r\n          customizeTooltip={customizeTooltip}\r\n        />\r\n        <Legend visible={false} />\r\n        <ZoomAndPan argumentAxis=\"both\" />\r\n      </Chart>\r\n      <br />\r\n      <Grid container spacing={1}>\r\n        {[\"1D\", \"7D\", \"1M\", \"6M\", \"1Y\", \"All\"].map((value, index) => {\r\n          return (\r\n            <Grid item key={index}>\r\n              <Button\r\n                className={`${classes.daysBtn}${\r\n                  daysSelected[index] ? \" \" + classes.daysSelected : \"\"\r\n                }`}\r\n                variant=\"outlined\"\r\n                key={index}\r\n                onClick={changeDays.bind(this, index)}\r\n              >\r\n                {value}\r\n              </Button>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ChartComponent;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Grid, Card, CardContent, Container } from \"@material-ui/core\";\r\n\r\nimport coinGecko from \"../API/coinGecko\";\r\nimport MarketDetails from \"../components/MarketDetails\";\r\nimport ChartComponent from \"../components/ChartComponent\";\r\n\r\nconst Details = ({ match }) => {\r\n  const [marketData, setMarketData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const coinId = match.params.coinId;\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n      const market = await coinGecko.get(`/coins/${coinId}`, {\r\n        params: {\r\n          localization: false,\r\n          tickers: false,\r\n          market_data: true,\r\n          community_data: false,\r\n          developer_data: false,\r\n          sparkline: false,\r\n        },\r\n      });\r\n\r\n      setMarketData(market.data);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [coinId]);\r\n\r\n  return (\r\n    <Container>\r\n      <Grid container spacing={2} justify=\"center\" direction=\"row\">\r\n        <Grid item xs={12}>\r\n          <Card style={{ height: \"100%\", justifyItems: \"center\" }}>\r\n            <CardContent>\r\n              <ChartComponent\r\n                coin={coinId}\r\n                currency=\"usd\"\r\n                marketData={marketData}\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Card>\r\n            <CardContent>\r\n              <MarketDetails\r\n                marketData={marketData}\r\n                currency=\"usd\"\r\n                isLoading={isLoading}\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Details;\r\n","import React, { useState } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport {\n  createMuiTheme,\n  ThemeProvider,\n  CssBaseline,\n  AppBar,\n  Toolbar,\n  Typography,\n  IconButton,\n} from \"@material-ui/core\";\nimport { Brightness4, BrightnessHigh } from \"@material-ui/icons\";\n\nimport CoinList from \"./pages/CoinList\";\nimport Details from \"./pages/Details\";\n\nfunction App() {\n  const [themeColor, setThemeType] = useState(\n    window.localStorage.getItem(\"theme\") || \"dark\"\n  );\n\n  const theme = createMuiTheme({\n    palette: {\n      type: themeColor,\n    },\n  });\n\n  const changeTheme = (event) => {\n    const type = themeColor === \"dark\" ? \"light\" : \"dark\";\n    window.localStorage.setItem(\"theme\", type);\n    setThemeType(type);\n  };\n\n  return (\n    <React.Fragment>\n      <ThemeProvider theme={theme}>\n        <AppBar\n          color=\"default\"\n          position=\"sticky\"\n          style={{ marginBottom: theme.spacing(1) }}\n        >\n          <Toolbar variant=\"dense\">\n            <Typography style={{ flexGrow: 1 }}>Coin Watch</Typography>\n            <IconButton onClick={changeTheme}>\n              {themeColor !== \"dark\" ? <Brightness4 /> : <BrightnessHigh />}\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        <CssBaseline />\n        <BrowserRouter>\n          <Switch>\n            <Route\n              exact\n              path=\"/coin-watch\"\n              render={(props) => <CoinList currency=\"usd\" {...props} />}\n            />\n            <Route path=\"/coin-watch/:coinId\" component={Details} />\n          </Switch>\n        </BrowserRouter>\n        {/* <Container>\n          <Details\n            coinId={coinId}\n            marketData={marketData}\n            isLoading={isLoading}\n          />\n          <Card>\n            <CardContent>\n              <CoinList currency=\"usd\" />\n            </CardContent>\n          </Card>\n        </Container> */}\n      </ThemeProvider>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}