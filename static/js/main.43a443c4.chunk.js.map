{"version":3,"sources":["API/coinGecko.js","components/ChartComponent.jsx","components/MarketDetails.jsx","context/ConnectionContext.jsx","components/CoinList.jsx","App.jsx","index.jsx"],"names":["axios","create","baseURL","useStyle","makeStyles","theme","chartChangeBtnChecked","color","palette","info","light","daysSelected","background","daysBtn","paddingLeft","paddingRight","minWidth","ChartComponent","coin","currency","marketData","useState","dataSource","setDataSource","isLoading","setIsLoading","line","setLine","setDaysSelected","useTheme","classes","currencyFormatter","Intl","NumberFormat","style","maximumFractionDigits","percentFormatter","undefined","useEffect","days","a","coinGecko","get","params","vs_currency","indexOf","data","mappedData","map","value","date","Date","o","h","l","c","fetchData","changeDays","index","res","i","Fragment","LinearProgress","Grid","container","direction","justify","alignItems","item","spacing","Avatar","src","image","small","Typography","format","market_data","current_price","display","price_change_percentage_24h","green","red","ArrowDropUp","ArrowDropDown","IconButton","size","disableRipple","className","onClick","ShowChart","id","type","title","name","show","argumentField","openValueField","highValueField","lowValueField","closeValueField","valueField","position","precision","enabled","location","customizeTooltip","arg","html","originalArgument","toLocaleString","dateStyle","timeStyle","hourCycle","openValue","closeValue","highValue","lowValue","visible","argumentAxis","Button","variant","bind","MarketDetails","coinFormatter","content","market_cap","percent","market_cap_change_percentage_24h","ath","ath_change_percentage","atl","atl_change_percentage","total_volume","circulating_supply","symbol","toUpperCase","fully_diluted_valuation","row","length","Divider","ConnectionContext","React","createContext","ConnectionProvider","children","coinId","setCoinId","Provider","selected","backgroundColor","WatchList","list","setList","page","setPage","perPage","setPerPage","useContext","order","per_page","price_change_percentage","markets","rank","market_cap_rank","price","priceChange","marketCap","volume","isSelected","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","listItem","hover","event","newList","window","scroll","top","left","behavior","rowClickHandler","slice","TablePagination","component","rowsPerPageOptions","count","rowsPerPage","onChangePage","newPage","onChangeRowsPerPage","target","App","setMarketData","localStorage","getItem","themeColor","setThemeType","createMuiTheme","localization","tickers","community_data","developer_data","sparkline","market","ThemeProvider","AppBar","marginBottom","Toolbar","flexGrow","setItem","Brightness4","BrightnessHigh","Container","CssBaseline","xs","md","Card","height","justifyItems","CardContent","CoinList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.43a443c4.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"https://api.coingecko.com/api/v3\",\r\n});\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Chart, {\r\n  CommonSeriesSettings,\r\n  Series,\r\n  Reduction,\r\n  ArgumentAxis,\r\n  Label,\r\n  Format,\r\n  ValueAxis,\r\n  Tooltip,\r\n  ZoomAndPan,\r\n  Legend,\r\n  LoadingIndicator,\r\n} from \"devextreme-react/chart\";\r\nimport \"devextreme/dist/css/dx.common.css\";\r\nimport \"devextreme/dist/css/dx.light.css\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  Grid,\r\n  IconButton,\r\n  LinearProgress,\r\n  makeStyles,\r\n  Typography,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport { ShowChart, ArrowDropDown, ArrowDropUp } from \"@material-ui/icons\";\r\nimport { red, green } from \"@material-ui/core/colors\";\r\n\r\nimport coinGecko from \"../API/coinGecko\";\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n  chartChangeBtnChecked: {\r\n    color: theme.palette.info.light,\r\n  },\r\n  daysSelected: {\r\n    background: theme.palette.info.light,\r\n    \"&:hover\": {\r\n      background: theme.palette.info.light,\r\n    },\r\n  },\r\n  daysBtn: {\r\n    paddingLeft: \"0.1rem\",\r\n    paddingRight: \"0.1rem\",\r\n    minWidth: \"40px\",\r\n  },\r\n}));\r\n\r\nconst ChartComponent = ({ coin, currency, marketData }) => {\r\n  const [dataSource, setDataSource] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [line, setLine] = useState(false);\r\n  const [daysSelected, setDaysSelected] = useState([\r\n    true,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n  ]);\r\n\r\n  const theme = useTheme();\r\n  const classes = useStyle();\r\n  const formats = [\r\n    \"HH:mm\",\r\n    \"MMM dd\\nHH:mm\",\r\n    \"MMM dd\\nHH:mm\",\r\n    \"MMM dd\",\r\n    \"MMM dd\",\r\n    \"MMM dd\",\r\n  ];\r\n  const currencyFormatter = new Intl.NumberFormat(\"en-US\", {\r\n    style: \"currency\",\r\n    currency: currency,\r\n    maximumFractionDigits: 6,\r\n  });\r\n  const percentFormatter = new Intl.NumberFormat(undefined, {\r\n    maximumFractionDigits: 2,\r\n    style: \"percent\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    const days = [1, 7, 30, 180, 365, \"max\"];\r\n\r\n    const fetchData = async () => {\r\n      const data = await coinGecko.get(`/coins/${coin}/ohlc`, {\r\n        params: {\r\n          vs_currency: currency,\r\n          days: days[daysSelected.indexOf(true)],\r\n        },\r\n      });\r\n\r\n      const mappedData = data.data.map((value) => {\r\n        return {\r\n          date: new Date(value[0]),\r\n          o: value[1],\r\n          h: value[2],\r\n          l: value[3],\r\n          c: value[4],\r\n        };\r\n      });\r\n      setDataSource(mappedData);\r\n      setIsLoading(false);\r\n    };\r\n    fetchData();\r\n  }, [coin, currency, daysSelected]);\r\n\r\n  const customizeTooltip = (arg) => {\r\n    const text =\r\n      `<div><b>${arg.originalArgument.toLocaleString(undefined, {\r\n        dateStyle: \"medium\",\r\n        timeStyle: \"short\",\r\n        hourCycle: \"h23\",\r\n      })}</b><br/><br/>` +\r\n      (arg.openValue\r\n        ? `<b>Open:</b> ${currencyFormatter.format(arg.openValue)}<br/>\r\n<b>Close:</b> ${currencyFormatter.format(arg.closeValue)}<br/>\r\n<b>High:</b> ${currencyFormatter.format(arg.highValue)}<br/>\r\n<b>Low:</b> ${currencyFormatter.format(arg.lowValue)}</div>`\r\n        : `<b>Price:</b> ${currencyFormatter.format(arg.value)}</div>`);\r\n    return {\r\n      html: text,\r\n    };\r\n  };\r\n\r\n  const btnToggle = () => {\r\n    setLine(!line);\r\n  };\r\n\r\n  const changeDays = (index) => {\r\n    const res = daysSelected.map((value, i) => {\r\n      return i === index;\r\n    });\r\n    setDaysSelected(res);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <LinearProgress />}\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        <Grid item>\r\n          <Grid container direction=\"row\" spacing={2} alignItems=\"center\">\r\n            <Grid item>\r\n              <Avatar src={marketData && marketData.image.small} />\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography>\r\n                {marketData &&\r\n                  currencyFormatter.format(\r\n                    marketData.market_data.current_price[currency]\r\n                  )}\r\n              </Typography>\r\n              <Typography\r\n                style={{\r\n                  display: \"flex\",\r\n                  color:\r\n                    marketData &&\r\n                    (marketData.market_data.price_change_percentage_24h >= 0\r\n                      ? green[400]\r\n                      : red[400]),\r\n                }}\r\n              >\r\n                {marketData &&\r\n                  (marketData.market_data.price_change_percentage_24h >= 0 ? (\r\n                    <ArrowDropUp />\r\n                  ) : (\r\n                    <ArrowDropDown />\r\n                  ))}\r\n                {marketData &&\r\n                  percentFormatter.format(\r\n                    marketData.market_data.price_change_percentage_24h / 100\r\n                  )}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n          <IconButton\r\n            size=\"small\"\r\n            disableRipple\r\n            className={line ? classes.chartChangeBtnChecked : \"\"}\r\n            onClick={btnToggle}\r\n          >\r\n            <ShowChart />\r\n          </IconButton>\r\n        </Grid>\r\n      </Grid>\r\n      <Chart\r\n        id=\"chart\"\r\n        theme={`generic.${theme.palette.type}`}\r\n        title={marketData && marketData.name + \" Price\"}\r\n        dataSource={dataSource}\r\n      >\r\n        <LoadingIndicator show={isLoading} />\r\n        <CommonSeriesSettings\r\n          argumentField=\"date\"\r\n          type={line ? \"\" : \"candlestick\"}\r\n        />\r\n        <Series\r\n          name={marketData && marketData.name}\r\n          openValueField=\"o\"\r\n          highValueField=\"h\"\r\n          lowValueField=\"l\"\r\n          closeValueField=\"c\"\r\n          valueField=\"c\"\r\n        >\r\n          <Reduction color=\"red\" />\r\n        </Series>\r\n        <ArgumentAxis>\r\n          <Label format={formats[daysSelected.indexOf(true)]} />\r\n        </ArgumentAxis>\r\n        <ValueAxis position=\"left\">\r\n          <Label>\r\n            <Format\r\n              precision={\r\n                marketData &&\r\n                (marketData.market_data.current_price[currency] > 100 ? 0 : 2)\r\n              }\r\n              type=\"currency\"\r\n              currency={currency}\r\n            />\r\n          </Label>\r\n        </ValueAxis>\r\n        <Tooltip\r\n          enabled={true}\r\n          location=\"edge\"\r\n          customizeTooltip={customizeTooltip}\r\n        />\r\n        <Legend visible={false} />\r\n        <ZoomAndPan argumentAxis=\"both\" />\r\n      </Chart>\r\n      <br />\r\n      <Grid container spacing={1}>\r\n        {[\"1D\", \"7D\", \"1M\", \"6M\", \"1Y\", \"All\"].map((value, index) => {\r\n          return (\r\n            <Grid item key={index}>\r\n              <Button\r\n                className={`${classes.daysBtn}${\r\n                  daysSelected[index] ? \" \" + classes.daysSelected : \"\"\r\n                }`}\r\n                variant=\"outlined\"\r\n                key={index}\r\n                onClick={changeDays.bind(this, index)}\r\n              >\r\n                {value}\r\n              </Button>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ChartComponent;\r\n","import { Divider, Grid, LinearProgress, Typography } from \"@material-ui/core\";\r\nimport { ArrowDropUp, ArrowDropDown } from \"@material-ui/icons\";\r\nimport { red, green } from \"@material-ui/core/colors\";\r\nimport React from \"react\";\r\n\r\nconst MarketDetails = ({ marketData, currency, isLoading }) => {\r\n  const currencyFormatter = new Intl.NumberFormat(\"en-US\", {\r\n    style: \"currency\",\r\n    currency: currency,\r\n    maximumFractionDigits: 6,\r\n  });\r\n  const percentFormatter = new Intl.NumberFormat(undefined, {\r\n    maximumFractionDigits: 2,\r\n    style: \"percent\",\r\n  });\r\n  const coinFormatter = new Intl.NumberFormat();\r\n\r\n  const content =\r\n    [\r\n      [\r\n        {\r\n          name: \"Market Cap\",\r\n          value:\r\n            (!isLoading &&\r\n              currencyFormatter.format(\r\n                marketData.market_data.market_cap[currency]\r\n              )) ||\r\n            \"--\",\r\n          percent:\r\n            (!isLoading &&\r\n              percentFormatter.format(\r\n                marketData.market_data.market_cap_change_percentage_24h / 100\r\n              )) ||\r\n            \"--\",\r\n        },\r\n        {\r\n          name: \"All Time High\",\r\n          value:\r\n            (!isLoading &&\r\n              currencyFormatter.format(marketData.market_data.ath[currency])) ||\r\n            \"--\",\r\n          percent:\r\n            (!isLoading &&\r\n              percentFormatter.format(\r\n                marketData.market_data.ath_change_percentage[currency] / 100\r\n              )) ||\r\n            \"--\",\r\n        },\r\n        {\r\n          name: \"All Time Low\",\r\n          value:\r\n            (!isLoading &&\r\n              currencyFormatter.format(marketData.market_data.atl[currency])) ||\r\n            \"--\",\r\n          percent:\r\n            (!isLoading &&\r\n              percentFormatter.format(\r\n                marketData.market_data.atl_change_percentage[currency] / 100\r\n              )) ||\r\n            \"--\",\r\n        },\r\n        {\r\n          name: \"Volume\",\r\n          value:\r\n            (!isLoading &&\r\n              currencyFormatter.format(\r\n                marketData.market_data.total_volume[currency]\r\n              )) ||\r\n            \"--\",\r\n        },\r\n        {\r\n          name: \"Circulating Supply\",\r\n          value: `${\r\n            !isLoading\r\n              ? coinFormatter.format(\r\n                  marketData.market_data.circulating_supply\r\n                ) + \" \"\r\n              : \"-\"\r\n          }${!isLoading ? marketData.symbol.toUpperCase() : \"-\"}`,\r\n        },\r\n        {\r\n          name: \"Fully Diluted Valuation\",\r\n          value:\r\n            (!isLoading &&\r\n              marketData.market_data.fully_diluted_valuation[currency] &&\r\n              !isLoading &&\r\n              currencyFormatter.format(\r\n                marketData.market_data.fully_diluted_valuation[currency]\r\n              )) ||\r\n            \"--\",\r\n        },\r\n      ],\r\n    ] || [];\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <LinearProgress />}\r\n      {content.map((row, index) => {\r\n        return (\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            justify=\"space-between\"\r\n            key={index}\r\n            spacing={3}\r\n          >\r\n            {row.map((item, index) => {\r\n              return (\r\n                <Grid item key={index}>\r\n                  <Typography variant=\"subtitle2\" display=\"block\">\r\n                    {item.name}\r\n                  </Typography>\r\n                  <Typography variant=\"h6\" display=\"block\">\r\n                    {item.value}\r\n                  </Typography>\r\n                  {item.percent && (\r\n                    <Typography\r\n                      variant=\"caption\"\r\n                      style={{\r\n                        display: \"flex\",\r\n                        color:\r\n                          !isLoading &&\r\n                          (item.percent >= 0 ? green[400] : red[400]),\r\n                      }}\r\n                    >\r\n                      {!isLoading &&\r\n                        (item.percent >= 0 ? (\r\n                          <ArrowDropUp />\r\n                        ) : (\r\n                          <ArrowDropDown />\r\n                        ))}\r\n                      {item.percent}\r\n                    </Typography>\r\n                  )}\r\n                  {index < row.length - 1 && <Divider variant=\"fullWidth\" />}\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n        );\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MarketDetails;\r\n","import React, { useState } from \"react\";\r\n\r\nexport const ConnectionContext = React.createContext(null);\r\n\r\nconst ConnectionProvider = ({ children }) => {\r\n  const [coinId, setCoinId] = useState(\"bitcoin\");\r\n\r\n  return (\r\n    <ConnectionContext.Provider\r\n      value={{\r\n        coinId,\r\n        setCoinId,\r\n      }}\r\n    >\r\n      {children}\r\n    </ConnectionContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ConnectionProvider;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Avatar,\r\n  LinearProgress,\r\n  makeStyles,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n} from \"@material-ui/core\";\r\nimport { ArrowDropUp, ArrowDropDown } from \"@material-ui/icons\";\r\nimport { red, green } from \"@material-ui/core/colors\";\r\n\r\nimport coinGecko from \"../API/coinGecko\";\r\nimport { ConnectionContext } from \"../context/ConnectionContext\";\r\n\r\nconst useStyle = makeStyles({\r\n  selected: {\r\n    backgroundColor: \"rgba(100, 181, 246, 0.3)!important\",\r\n  },\r\n});\r\n\r\nconst createData = (\r\n  id,\r\n  rank,\r\n  image,\r\n  name,\r\n  price,\r\n  priceChange,\r\n  marketCap,\r\n  volume\r\n) => {\r\n  return {\r\n    id,\r\n    rank,\r\n    image,\r\n    name,\r\n    price,\r\n    priceChange,\r\n    marketCap,\r\n    volume,\r\n    isSelected: false,\r\n  };\r\n};\r\n\r\nconst WatchList = ({ currency }) => {\r\n  const [list, setList] = useState(null);\r\n  const [page, setPage] = useState(1);\r\n  const [perPage, setPerPage] = useState(10);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const { setCoinId } = useContext(ConnectionContext);\r\n\r\n  const classes = useStyle();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n      const markets = await coinGecko.get(\"/coins/markets\", {\r\n        params: {\r\n          vs_currency: currency,\r\n          order: \"market_cap_desc\",\r\n          per_page: perPage,\r\n          page: page,\r\n          price_change_percentage: \"24h\",\r\n        },\r\n      });\r\n\r\n      const currencyFormatter = new Intl.NumberFormat(\"en-US\", {\r\n        style: \"currency\",\r\n        currency: currency,\r\n        maximumFractionDigits: 6,\r\n      });\r\n      const percentFormatter = new Intl.NumberFormat(undefined, {\r\n        maximumFractionDigits: 2,\r\n        style: \"percent\",\r\n      });\r\n\r\n      setList(\r\n        markets.data.map((item) => {\r\n          return createData(\r\n            item.id,\r\n            item.market_cap_rank,\r\n            item.image,\r\n            item.name,\r\n            currencyFormatter.format(item.current_price),\r\n            percentFormatter.format(item.price_change_percentage_24h / 100),\r\n            currencyFormatter.format(item.market_cap),\r\n            currencyFormatter.format(item.total_volume)\r\n          );\r\n        })\r\n      );\r\n\r\n      setIsLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, [currency, page, perPage]);\r\n\r\n  const changePageHandler = (event, newPage) => {\r\n    setPage(newPage + 1);\r\n  };\r\n\r\n  const changeRowPerPageHandler = (event) => {\r\n    setPerPage(event.target.value);\r\n    setPage(1);\r\n  };\r\n\r\n  const rowClickHandler = (event, index) => {\r\n    const newList = list.map((value, i) => {\r\n      return i === index\r\n        ? { ...value, isSelected: true }\r\n        : { ...value, isSelected: false };\r\n    });\r\n    setList(newList);\r\n    setCoinId(newList[index].id);\r\n    window.scroll({ top: 0, left: 0, behavior: \"smooth\" });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <LinearProgress />}\r\n      <TableContainer>\r\n        <Table size=\"small\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>#</TableCell>\r\n              <TableCell></TableCell>\r\n              <TableCell>name</TableCell>\r\n              <TableCell>price</TableCell>\r\n              <TableCell>24h %</TableCell>\r\n              <TableCell>market cap</TableCell>\r\n              <TableCell>volume</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {list &&\r\n              list.map((listItem, index) => {\r\n                return (\r\n                  <TableRow\r\n                    key={listItem.rank}\r\n                    hover\r\n                    onClick={(event) => rowClickHandler(event, index)}\r\n                    selected={listItem.isSelected}\r\n                    classes={{\r\n                      selected: classes.selected,\r\n                    }}\r\n                  >\r\n                    <TableCell>{listItem.rank}</TableCell>\r\n                    <TableCell>\r\n                      <Avatar src={listItem.image} />\r\n                    </TableCell>\r\n                    <TableCell>{listItem.name}</TableCell>\r\n                    <TableCell>{listItem.price}</TableCell>\r\n                    <TableCell>\r\n                      <span\r\n                        style={{\r\n                          display: \"flex\",\r\n                          color:\r\n                            listItem.priceChange.slice(0, -1) >= 0\r\n                              ? green[400]\r\n                              : red[400],\r\n                        }}\r\n                      >\r\n                        {listItem.priceChange.slice(0, -1) >= 0 ? (\r\n                          <ArrowDropUp />\r\n                        ) : (\r\n                          <ArrowDropDown />\r\n                        )}\r\n                        {listItem.priceChange}\r\n                      </span>\r\n                    </TableCell>\r\n                    <TableCell>{listItem.marketCap}</TableCell>\r\n                    <TableCell>{listItem.volume}</TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        component=\"div\"\r\n        rowsPerPageOptions={[10, 25, 50, 100]}\r\n        count={200}\r\n        rowsPerPage={perPage}\r\n        page={page - 1}\r\n        onChangePage={changePageHandler}\r\n        onChangeRowsPerPage={changeRowPerPageHandler}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default WatchList;\r\n","import {\n  Card,\n  CardContent,\n  Container,\n  Grid,\n  createMuiTheme,\n  ThemeProvider,\n  CssBaseline,\n  AppBar,\n  Toolbar,\n  Typography,\n  IconButton,\n} from \"@material-ui/core\";\nimport { Brightness4, BrightnessHigh } from \"@material-ui/icons\";\nimport React, { useContext, useEffect, useState } from \"react\";\n\nimport coinGecko from \"./API/coinGecko\";\nimport ChartComponent from \"./components/ChartComponent\";\nimport MarketDetails from \"./components/MarketDetails\";\nimport CoinList from \"./components/CoinList\";\nimport { ConnectionContext } from \"./context/ConnectionContext\";\n\nfunction App() {\n  const [marketData, setMarketData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [themeColor, setThemeType] = useState(\n    window.localStorage.getItem(\"theme\") || \"dark\"\n  );\n\n  const { coinId } = useContext(ConnectionContext);\n\n  const theme = createMuiTheme({\n    palette: {\n      type: themeColor,\n    },\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      const market = await coinGecko.get(`/coins/${coinId}`, {\n        params: {\n          localization: false,\n          tickers: false,\n          market_data: true,\n          community_data: false,\n          developer_data: false,\n          sparkline: false,\n        },\n      });\n\n      setMarketData(market.data);\n      setIsLoading(false);\n    };\n\n    fetchData();\n  }, [coinId]);\n\n  const changeTheme = (event) => {\n    const type = themeColor === \"dark\" ? \"light\" : \"dark\";\n    window.localStorage.setItem(\"theme\", type);\n    setThemeType(type);\n  };\n\n  return (\n    <React.Fragment>\n      <ThemeProvider theme={theme}>\n        <AppBar\n          color=\"default\"\n          position=\"sticky\"\n          style={{ marginBottom: theme.spacing(1) }}\n        >\n          <Toolbar variant=\"dense\">\n            <Typography style={{ flexGrow: 1 }}>Coin Watch</Typography>\n            <IconButton onClick={changeTheme}>\n              {themeColor !== \"dark\" ? <Brightness4 /> : <BrightnessHigh />}\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        <Container>\n          <CssBaseline />\n          <Grid container spacing={2} justify=\"center\" direction=\"row\">\n            <Grid item xs={12} md={9}>\n              <Card style={{ height: \"100%\", justifyItems: \"center\" }}>\n                <CardContent>\n                  <ChartComponent\n                    coin={coinId}\n                    currency=\"usd\"\n                    marketData={marketData}\n                  />\n                </CardContent>\n              </Card>\n            </Grid>\n            <Grid item xs={12} md={3}>\n              <Card>\n                <CardContent>\n                  <MarketDetails\n                    marketData={marketData}\n                    currency=\"usd\"\n                    isLoading={isLoading}\n                  />\n                </CardContent>\n              </Card>\n            </Grid>\n            <Grid item xs={12}>\n              <Card>\n                <CardContent>\n                  <CoinList currency=\"usd\" />\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n        </Container>\n      </ThemeProvider>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport ConnectionProvider from \"./context/ConnectionContext\";\n\nReactDOM.render(\n  <ConnectionProvider>\n    <App />\n  </ConnectionProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}